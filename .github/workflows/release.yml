name: OpenShift
on: 
  push: 
  
jobs:
  install-repo-runner:
    runs-on: ubuntu-20.04
    name: Install runner into this repository
    steps:
      - name: Checkout action
        uses: actions/checkout@v2

      - uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
          insecure_skip_tls_verify: true

      - name: Install self hosted runner into repository
        id: install-runners
        uses: redhat-actions/openshift-actions-runner-installer@v1
        # Test the checked-out version of this runner - a user would need the above 'uses'.
        with:
          # This token has 'repo' permissions
          github_pat: ${{ secrets.PAT }}

          helm_release_name: node-${{ matrix.runner_tag }}-runner

          # Give the runner these two labels (which are required by the workflow below)
          runner_labels: node

      - name: Echo outputs
        shell: bash
        run: |
          echo "${{ toJSON(steps.install-runners.outputs) }}"        




  tear-down-runners:
    name: Tear down repository runners
    runs-on: ubuntu-20.04
    env:
      HELM_RELEASE_NAME: "node-runner"

    steps:
      - uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
          insecure_skip_tls_verify: true

      - run: helm ls

      # If we were running in the same workflow as the self-hosted runner installation,
      # we could use ${{ <job>.outputs.helm_release_name }} to get the release name
      - run: |
          if helm status ${{ env.HELM_RELEASE_NAME }}; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Release ${{ env.HELM_RELEASE_NAME }} not found"
          fi
      - run: helm uninstall ${{ env.HELM_RELEASE_NAME }}
        if: env.RELEASE_EXISTS == 'true'

























# name: C/C++ CI

# on: [push, pull_request, workflow_dispatch]

# # on:
# #   push:
# #     branches: [ master ]
# #   pull_request:
# #     branches: [ master ]

# jobs:
#   configure:
#     runs-on: [self-hosted, deepr]

#     steps:
#     - name: Check out repository code
#       uses: actions/checkout@v2

#     - name: configure
#       run: |
#         echo "üçè This job's status is ${{ job.status }}."
        
#     - name: Build
#       run: |
#         echo "üçè Building"
#         conan config set general.revisions_enabled=1
#         conan remote add common https://deepranalytics.jfrog.io/artifactory/api/conan/deepr-common --force
#         conan user ${{ secrets.CONAN_USERNAME }} -p ${{ secrets.CONAN_PASSWORD }} -r common
#         conan user
#         ./ci/windows-build.bat

#     - name: Create Installer
#       run: |
#         echo "üçè Create Installer"
#         ./ci/windows-package.bat
#         cd

#     - name: Path
#       run: pwd
        
#     - name: Upload Installer
#       uses: actions/upload-artifact@v2
#       with:
#           name: Scanner
#           path: |
#             bin/Release/Scanner-*.exe
#             bin/Release/Scanner.pdb

#     - name: Publish
#       env:
#           GITHUB_TOKEN: "${{ secrets.RELEASE_REPO_SECRET }}"
#       run: |
#         ./ci/publish.sh
#       shell: bash


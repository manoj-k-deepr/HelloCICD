name: C/C++ CI

on: [push]
jobs:
  build-ubuntu:
    runs-on: [self-hosted, Linux, X64]
    container:
       image: deepr/devopsubuntu:latest
       credentials:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   

    steps:     
      - name: configure
        run: |
          gcc --version
          pwd
      
      - name: Pulling git dir..
        uses: actions/checkout@v2
         
      - name: build
        run: | 
          echo "Build"
          whoami
          pwd
          chmod +x "./ci/linux-build.sh"
          "./ci/linux-build.sh" 

      - name: test
        run: echo "Test"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: HelloCOCD
          path: version.txt
        
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           body: |
#             Changes in this Release
#             - First Change
#             - Second Change
#           draft: false
#           prerelease: false
#           path: version.txt
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./version.txt
#           asset_name: my-artifact.zip
#           asset_content_type: application/zip
          
#       - name: Clean Workspace
#         run: |
#           echo "Cleaning up"
#           rm -rf "${{ github.workspace }}"


#   build-windows:
#     runs-on: [self-hosted, Windows, X64, deepr]

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         token: ${{ secrets.REPO_SCOPED_TOKEN }}
#     - name: configure
#       run: echo "Configure complete"
#     - name: build
#       run: ./ci/windows-build.bat
#     - name: test
#       run: echo "Test Complete"
